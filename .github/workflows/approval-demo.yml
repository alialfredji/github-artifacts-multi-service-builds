name: Approval Demo Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      service:
        description: 'Service to deploy'
        required: false
        type: string
      skip_approval:
        description: 'Skip manual approval (for testing)'
        required: false
        default: false
        type: boolean

env:
  TARGET_ENV: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.generate-id.outputs.deployment-id }}
      target-service: ${{ steps.determine-service.outputs.service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate deployment ID
        id: generate-id
        run: |
          DEPLOYMENT_ID="deploy-$(date +%Y%m%d-%H%M%S)-${{ github.run_number }}"
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Generated deployment ID: $DEPLOYMENT_ID"

      - name: Determine target service
        id: determine-service
        run: |
          if [ -n "${{ github.event.inputs.service }}" ]; then
            SERVICE="${{ github.event.inputs.service }}"
          else
            SERVICE="all-services"
          fi
          echo "service=$SERVICE" >> $GITHUB_OUTPUT
          echo "Target service: $SERVICE"

      - name: Validate deployment request
        run: |
          echo "Deployment Request Summary:"
          echo "- Environment: ${{ env.TARGET_ENV }}"
          echo "- Service: ${{ steps.determine-service.outputs.service }}"
          echo "- Deployment ID: ${{ steps.generate-id.outputs.deployment-id }}"
          echo "- Skip Approval: ${{ github.event.inputs.skip_approval }}"
          echo "- Requester: ${{ github.actor }}"

  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: prepare
    if: github.event.inputs.skip_approval != 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Wait for approval
        run: |
          echo "Waiting for manual approval for deployment:"
          echo "- Deployment ID: ${{ needs.prepare.outputs.deployment-id }}"
          echo "- Environment: ${{ env.TARGET_ENV }}"
          echo "- Service: ${{ needs.prepare.outputs.target-service }}"
          echo ""
          echo "This step will pause until an authorized user approves the deployment."

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [prepare, approval]
    if: always() && (needs.approval.result == 'success' || github.event.inputs.skip_approval == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Simulate deployment
        run: |
          echo "Starting deployment..."
          echo "- Deployment ID: ${{ needs.prepare.outputs.deployment-id }}"
          echo "- Environment: ${{ env.TARGET_ENV }}"
          echo "- Service: ${{ needs.prepare.outputs.target-service }}"
          echo ""
          
          # Simulate deployment process
          echo "Step 1: Preparing deployment package..."
          sleep 2
          
          echo "Step 2: Validating target environment..."
          sleep 1
          
          echo "Step 3: Deploying service(s)..."
          sleep 3
          
          echo "Step 4: Running health checks..."
          sleep 2
          
          echo "Deployment completed successfully!"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          echo "- Service health: OK"
          echo "- Environment status: Active"
          echo "- Deployment ID: ${{ needs.prepare.outputs.deployment-id }}"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [prepare, approval, deploy]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID:** ${{ needs.prepare.outputs.deployment-id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.TARGET_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ needs.prepare.outputs.target-service }}" >> $GITHUB_STEP_SUMMARY
          echo "**Requester:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- Preparation: ${{ needs.prepare.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Approval: ${{ needs.approval.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "❌ **Deployment failed. Check logs for details.**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.approval.result }}" == "failure" ] || [ "${{ needs.approval.result }}" == "cancelled" ]; then
            echo "⏹️ **Deployment cancelled - approval was not granted.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Deployment status unknown.**" >> $GITHUB_STEP_SUMMARY
          fi
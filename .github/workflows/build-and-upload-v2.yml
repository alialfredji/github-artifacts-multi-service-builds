name: Build and Upload All Services (Smart)

on:
  # push:
  #   branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      max_concurrent:
        description: 'Maximum number of services to build in parallel (default: 5)'
        required: false
        default: '5'
        type: string
      force_build_all:
        description: 'Force build all services (ignore changes)'
        required: false
        default: 'false'
        type: boolean

jobs:
  discover-and-analyze-services:
    runs-on: ubuntu-latest
    outputs:
      services_to_build: ${{ steps.analyze-services.outputs.services_to_build }}
      max_parallel: ${{ steps.set-max-parallel.outputs.max_parallel }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for change detection
      
    - name: Set max parallel value
      id: set-max-parallel
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.max_concurrent }}" ]; then
          echo "max_parallel=${{ github.event.inputs.max_concurrent }}" >> $GITHUB_OUTPUT
        else
          echo "max_parallel=5" >> $GITHUB_OUTPUT
        fi
        
    - name: Find all services
      id: find-services
      run: |
        # Find all directories that contain package.json files
        SERVICES_JSON=$(find . -maxdepth 2 -name "package.json" -not -path "./node_modules/*" | sed 's|/package.json||' | sed 's|^\./||' | sort | jq -R -s -c 'split("\n")[:-1]')
        echo "Found services: $SERVICES_JSON"
        echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
        
    - name: Analyze services for changes and missing artifacts
      id: analyze-services
      run: |
        SERVICES="${{ steps.find-services.outputs.services }}"
        BRANCH="${{ github.ref_name }}"
        FORCE_BUILD="${{ github.event.inputs.force_build_all }}"
        
        echo "Analyzing services for changes and missing artifacts..."
        echo "Branch: $BRANCH"
        echo "Force build all: $FORCE_BUILD"
        
        SERVICES_TO_BUILD="[]"
        
        # Convert services string to array
        SERVICES_ARRAY=$(echo "$SERVICES" | jq -r '.[]')
        
        while IFS= read -r service; do
          if [ -z "$service" ]; then
            continue
          fi
          
          echo "Analyzing service: $service"
          
          # Check if force build is enabled
          if [ "$FORCE_BUILD" = "true" ]; then
            echo "  -> Force build enabled, will build $service"
            SERVICES_TO_BUILD=$(echo "$SERVICES_TO_BUILD" | jq --arg svc "$service" '. += [$svc]')
            continue
          fi
          
          # Check if service has changes in Git history
          HAS_CHANGES=false
          if git diff --name-only HEAD~1 | grep -q "^$service/"; then
            echo "  -> Service $service has changes in Git history"
            HAS_CHANGES=true
          else
            echo "  -> Service $service has no changes in Git history"
          fi
          
          # Check if artifact exists for this service and branch
          ARTIFACT_EXISTS=false
          LATEST_ARTIFACT=$(gh api repos/${{ github.repository }}/actions/artifacts | \
            jq -r --arg service "$service" --arg branch "$BRANCH" \
            '.artifacts | sort_by(.updated_at) | reverse | .[] | 
             select(.name | startswith($service + "-build-" + $branch + "-")) | .name' | \
            head -1)
          
          if [ -n "$LATEST_ARTIFACT" ]; then
            echo "  -> Artifact exists: $LATEST_ARTIFACT"
            ARTIFACT_EXISTS=true
          else
            echo "  -> No artifact found for $service on $BRANCH"
          fi
          
          # Build if service has changes OR no artifact exists
          if [ "$HAS_CHANGES" = "true" ] || [ "$ARTIFACT_EXISTS" = "false" ]; then
            echo "  -> Will build $service (changes: $HAS_CHANGES, artifact exists: $ARTIFACT_EXISTS)"
            SERVICES_TO_BUILD=$(echo "$SERVICES_TO_BUILD" | jq --arg svc "$service" '. += [$svc]')
          else
            echo "  -> Skipping $service (no changes and artifact exists)"
          fi
          
        done <<< "$SERVICES_ARRAY"
        
        echo "Services to build: $SERVICES_TO_BUILD"
        echo "services_to_build=$SERVICES_TO_BUILD" >> $GITHUB_OUTPUT
        
  build-and-upload:
    needs: discover-and-analyze-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-and-analyze-services.outputs.services_to_build) }}
      max-parallel: ${{ needs.discover-and-analyze-services.outputs.max_parallel }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "Installing dependencies for ${{ matrix.service }}..."
        cd ${{ matrix.service }}
        npm ci
        cd ..
        
    - name: Build service
      run: |
        echo "Building ${{ matrix.service }}..."
        cd ${{ matrix.service }}
        npm run build
        echo "${{ matrix.service }}-build-${{ github.ref_name }}-${{ github.sha }}" > dist/build-id.txt
        cd ..
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-build-${{ github.ref_name }}-${{ github.sha }}
        path: ${{ matrix.service }}/dist/
        retention-days: 90
        
  summary:
    runs-on: ubuntu-latest
    needs: [discover-and-analyze-services, build-and-upload]
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "üèóÔ∏è  Smart Build Summary"
        echo "======================"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo ""
        
        SERVICES_TO_BUILD="${{ needs.discover-and-analyze-services.outputs.services_to_build }}"
        SERVICES_COUNT=$(echo "$SERVICES_TO_BUILD" | jq 'length')
        
        echo "Services built: $SERVICES_COUNT"
        if [ "$SERVICES_COUNT" -gt 0 ]; then
          echo "Built services:"
          echo "$SERVICES_TO_BUILD" | jq -r '.[]' | while read service; do
            echo "  ‚úÖ $service"
          done
        else
          echo "  No services needed building"
        fi
        
        echo ""
        echo "Build status: ${{ needs.build-and-upload.result }}"

name: Run Service Build

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service name to run (e.g., service-1, service-2)'
        required: true
        type: string
      branch:
        description: 'Branch to get build from (default: main)'
        required: false
        default: 'main'
        type: string
      run_timeout:
        description: 'How long to run the service in seconds (default: 30)'
        required: false
        default: '30'
        type: string

jobs:
  find-and-run-service:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Find latest build for service
      id: find-build
      run: |
        SERVICE_NAME="${{ inputs.service_name }}"
        BRANCH_NAME="${{ inputs.branch }}"
        
        echo "Looking for latest build of $SERVICE_NAME from $BRANCH_NAME branch..."
        
        # Find the latest successful build for this service and branch
        LATEST_BUILD=$(gh run list --limit 50 --json artifacts,headBranch,headSha,conclusion,createdAt \
          | jq -r --arg service "$SERVICE_NAME" --arg branch "$BRANCH_NAME" \
          '.[] | select(.conclusion == "success" and .headBranch == $branch) | 
           .artifacts[] | select(.name | startswith($service + "-build-")) | .name' \
          | head -1)
        
        if [ -z "$LATEST_BUILD" ]; then
          echo "❌ No build found for $SERVICE_NAME on $BRANCH_NAME branch"
          exit 1
        fi
        
        echo "✅ Found build: $LATEST_BUILD"
        echo "build_name=$LATEST_BUILD" >> $GITHUB_OUTPUT
        
    - name: Download service build
      run: |
        echo "Downloading ${{ steps.find-build.outputs.build_name }}..."
        gh run download-artifact --name "${{ steps.find-build.outputs.build_name }}" --path "./service-build"
        
        echo "Downloaded files:"
        ls -la ./service-build/
        
    - name: Verify build contents
      run: |
        if [ ! -f "./service-build/index.js" ]; then
          echo "❌ Build does not contain index.js"
          exit 1
        fi
        
        echo "✅ Build contains index.js"
        echo "Build contents:"
        head -20 ./service-build/index.js
        
    - name: Run service and capture output
      run: |
        echo "🚀 Starting ${{ inputs.service_name }}..."
        echo "Service will run for ${{ inputs.run_timeout }} seconds"
        echo "=========================================="
        
        # Run the service in background and capture output
        cd ./service-build
        
        # Start the service
        timeout ${{ inputs.run_timeout }}s node index.js > ../service-output.log 2>&1 &
        SERVICE_PID=$!
        
        # Wait a moment for service to start
        sleep 3
        
        # Check if service is running
        if kill -0 $SERVICE_PID 2>/dev/null; then
          echo "✅ Service started successfully (PID: $SERVICE_PID)"
          
          # Try to make a request to the service
          echo "📡 Testing service endpoint..."
          
          # Get the port from the service output or use default
          PORT=$(grep -o "port [0-9]*" ../service-output.log | head -1 | cut -d' ' -f2 || echo "3001")
          
          # Try to curl the service
          if command -v curl >/dev/null 2>&1; then
            echo "Making request to http://localhost:$PORT"
            curl -s --max-time 5 http://localhost:$PORT || echo "Service not responding to HTTP requests"
          fi
          
          # Let it run for the specified time
          echo "⏱️  Letting service run for ${{ inputs.run_timeout }} seconds..."
          sleep $(({{ inputs.run_timeout }} - 3))
          
          # Stop the service
          kill $SERVICE_PID 2>/dev/null || true
          echo "🛑 Service stopped"
        else
          echo "❌ Service failed to start"
        fi
        
        echo "=========================================="
        echo "📋 Service Output Log:"
        echo "=========================================="
        cat ../service-output.log
        
    - name: Upload service output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.service_name }}-run-output-${{ github.run_id }}
        path: service-output.log
        retention-days: 7
